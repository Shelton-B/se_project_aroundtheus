!function(){"use strict";var e=class{constructor(e,t,r,s,i){this.name=e.name,this.link=e.link,this._cardSelector=t,this._handleImageClick=r,this._handleDeleteCard=s,this.id=e._id,this._isLiked=e.isLiked,this._handleLikeCard=i}getCard(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardImageElement=this._cardElement.querySelector(".card__image"),this._cardImageElement.src=this.link,this._cardImageElement.alt=this.name,this._cardImageName=this._cardElement.querySelector(".card__title"),this._cardImageName.textContent=this.name,this._likeButton=this._cardElement.querySelector(".card__like-button"),this._deleteButton=this._cardElement.querySelector(".card__delete-button"),this._handleLikeStatus(),this._setEventListeners(),this._cardElement}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{console.log("test",this),this._handleLikeCard(this)})),this._deleteButton.addEventListener("click",(()=>this._handleDeleteCard(this))),this._cardImageElement.addEventListener("click",(()=>this._handleImageClick(this)))}_handleLikeStatus(){this.isLiked()?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}updateLikesView(){this._likeButton.classList.toggle("card__like-button_active")}isLiked(){return this._isLiked}handleDelete(){this._cardElement.remove()}},t=class{constructor(e,t){this._form=t,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._inputElements=Array.from(this._form.querySelectorAll(this._inputSelector)),this._submitButton=this._form.querySelector(this._submitButtonSelector)}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}toggleButtonState(){this._hasValidInputs()?(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1):(this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0)}_setEventListeners(){this._inputElements.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}_hasValidInputs(){return this._inputElements.every((e=>e.validity.valid))}},r=class{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popupElement.addEventListener("click",(e=>{(e.target===e.currentTarget||e.target.classList.contains("modal__close"))&&this.close()}))}},s=class extends r{constructor(e,t){let{popupSelector:r}=e;super({popupSelector:r}),this._handleFormSubmit=t,this._popupForm=this._popupElement.querySelector(".modal__form"),this._inputElements=this._popupForm.querySelectorAll(".modal__input"),this._buttonElement=this._popupForm.querySelector(".modal__button")}open(){super.open()}close(){super.close(),this._popupForm.reset()}_getInputValues(){const e={};return this._inputElements.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())})),super.setEventListeners()}renderLoading(e){this._buttonElement.textContent=e?"Saving...":"Save"}},i=class{constructor(e,t){let{items:r,renderer:s}=e;this._items=r,this._renderer=s,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}};const n={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},o=document.querySelector("#profile-edit-button"),a=document.querySelector("#profile_edit-modal"),l=document.querySelector("#profile-name-input"),d=document.querySelector("#profile-description-input"),c=a.querySelector(".modal__form"),u=(document.querySelector(".cards__list"),document.querySelector(".profile__add-button")),h=document.querySelector("#card-edit-modal").querySelector(".modal__form"),_=document.querySelector(".profile__avatar-button"),m=document.querySelector("#avatar-edit-modal").querySelector(".modal__form"),p=new class extends r{constructor(e){let{popupSelector:t}=e;super({popupSelector:t}),this._image=this._popupElement.querySelector(".modal__preview_image"),this._description=this._popupElement.querySelector(".modal__preview_text")}open(e){super.open(),this._image.src=e.link,this._image.alt=e.name,this._description.textContent=e.name}}({popupSelector:"#preview-modal"}),E=new class extends r{constructor(e){let{popupSelector:t}=e;super({popupSelector:t})}setEventListeners(){this._popupElement.querySelector(".modal__button").addEventListener("click",(()=>{this._handleDelete()})),super.setEventListeners()}setSubmitAction(e){this._handleDelete=e}}({popupSelector:"#delete-card-modal"}),v=new class{constructor(e){let{baseUrl:t,headers:r}=e;this._baseUrl=t,this._headers=r}loadUserInfo(){return fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}editUserInfo(e){let{name:t,about:r}=e;return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:r})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}editAvatar(e){let{avatar:t}=e;return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:t})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}addCard(e){let{name:t,link:r}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:r})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}deleteInitialCards(e){return fetch(`${this._baseUrl}/cards/${e}`,{headers:this._headers,method:"DELETE"}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}likeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{headers:this._headers,method:"PUT"}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}unlikeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{headers:this._headers,method:"DELETE"}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"c5770e84-6b43-47e8-8ef9-37352d6891bc","Content-Type":"application/json"}}),S=new class{constructor(e){let{nameSelector:t,descriptionSelector:r,userAvatar:s}=e;this._name=document.querySelector(t),this._description=document.querySelector(r),this._avatar=document.querySelector(s)}getUserInfo(){return{name:this._name.textContent,description:this._description.textContent}}setUserInfo(e){let{name:t,about:r}=e;this._name.textContent=t,this._description.textContent=r}setAvatar(e){let{avatar:t}=e;this._avatar.src=t}}({nameSelector:".profile__name",descriptionSelector:".profile__description",userAvatar:".profile__avatar"});let L;v.getInitialCards().then((t=>{L=new i({items:t,renderer:t=>{const r=new e(t,"#card-template",k,f,b);L.addItem(r.getCard())}},".cards__list"),L.renderItems()})),v.loadUserInfo().then((e=>{S.setUserInfo({name:e.name,about:e.about}),S.setAvatar({avatar:e.avatar})}));const k=e=>{p.open(e)};function f(e){E.open(),E.setSubmitAction((()=>{v.deleteInitialCards(e.id).then((()=>{e.handleDelete(),E.close()})).catch((e=>{console.error(e)}))}))}function b(e){e.isLiked?v.unlikeCard(e.id).then((()=>{e.isLiked=!1,e.updateLikesView()})).catch((e=>{console.error(e)})):v.likeCard(e.id).then((()=>{e.isLiked=!0,e.updateLikesView()})).catch((e=>{console.error(e)}))}u.addEventListener("click",(()=>{I.open(),g.toggleButtonState()})),o.addEventListener("click",(()=>{const e=S.getUserInfo();l.value=e.name,d.value=e.description,q.open(),y.toggleButtonState()})),_.addEventListener("click",(()=>{B.open(),C.toggleButtonState()}));const y=new t(n,c),g=new t(n,h),C=new t(n,m),I=new s({popupSelector:"#card-edit-modal"},(function(t){I.renderLoading(!0),v.addCard({name:t.name,link:t.link}).then((t=>{const r=function(t){return new e(t,"#card-template",k,f,b).getCard()}(t);L.addItem(r)})).catch((e=>{console.error(e)})).finally((()=>{I.renderLoading(!1),I.close()}))})),q=new s({popupSelector:"#profile_edit-modal"},(function(e){q.renderLoading(!0),v.editUserInfo(e).then((e=>{S.setUserInfo(e)})).catch((e=>{console.error(e)})).finally((()=>{q.renderLoading(!1),q.close()}))})),B=new s({popupSelector:"#avatar-edit-modal"},(function(e){B.renderLoading(!0),v.editAvatar({avatar:e.link}).then((e=>{S.setAvatar(e)})).catch((e=>{console.error(e)})).finally((()=>{B.renderLoading(!1),B.close()}))}));y.enableValidation(),g.enableValidation(),C.enableValidation(),I.setEventListeners(),q.setEventListeners(),p.setEventListeners(),E.setEventListeners(),B.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,